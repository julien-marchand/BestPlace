/*
 * Copyright (c) 2009 Ecole des Mines de Nantes.
 * 
 *  This file is part of Entropy.
 * 
 *  Entropy is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  Entropy is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with Entropy.  If not, see <http://www.gnu.org/licenses/>.
*/

/**
* This file is the main configuration file for Entropy.
* For details about configuration properties. 
* Refer to the website http://entropy.gforge.inria.fr/configuration.html
*/

/**
* Registry options
*/
entropy.registry.port = 1200
entropy.log4j.properties = baaadFile
entropy.delayBetweenLoops = 30

/**
* Authentification section
*/
auth.privateKey = config/privateKey
auth.username = root

/**
* Monitoring section
*/
//The implementation to use to monitor the architecture.
//Only ganglia is available
monitoring.adapter.impl = ganglia
//The address of the gmeta daemon
monitoring.adapter.ganglia.host = localhost
//The binding port for the gmeta daemon
monitoring.adapter.ganglia.port = 8651

//Description of a white OR a black list of nodes
//monitoring.adapter.nodesWhitelist =
//monitoring.adapter.nodesBlacklist = 

//The implementation of a configuration simplifier for memory
//Only sampler is available.
monitoring.simplify.mem.impl = sampler
//The size of the sample in MB
monitoring.simplify.mem.sampler.size = 1024
//The implementation of a configuration simplifier for CPU
//Available: sampler or CPUBurning (for CPU burning VMs)
monitoring.simplify.cpu.impl = sampler
monitoring.simplify.cpu.sampler.size = 250
//monitoring.simplify.cpu.impl = CPUBurning
//monitoring.simplify.cpu.threshold = 200

/**
* Control loop section
*/
controlLoop.logsDir = ./logs
controlLoop.impl = custom
controlLoop.custom.vjobsPath = ./vjobs
controlLoop.custom.assignTimeout = 10
controlLoop.custom.planTimeout = 15
controlLoop.custom.vmBuilder = xenVMBuilder
controlLoop.custom.nodesPartsFile = ./nodesParts.txt
controlLoop.custom.xenVMBuilder.cfgDir = ./domains/

/**
* The different duration of each action.
* Use an mathematical expression. 
* For actions run, stop, migrate, suspend@local, resume@local, resume@remote:
* Variables VM#memory, VM#cpu_consumption, VM#cpu_demand, VM#cpu_nb can be used
*
* For actions startup and shutdown:
* Variables node#memory, node#cpu_capacity, node#cpu_nb can be used
*/
plan.action.duration.run = 1
plan.action.duration.stop = 2
plan.action.duration.migrate = 3
plan.action.duration.suspend@local = 4
plan.action.duration.resume@local = 5
plan.action.duration.resume@remote = 6
plan.action.duration.startup = 6
plan.action.duration.shutdown = 6

/**
* Driver section
*/
/**
* Drivers customization section.
*/
driver.xenapi.username = 
driver.xenapi.password = 
driver.xenapi.port = 9363
driver.xenapi.relocationPort = 8002
driver.xenapi.stateFilesLocation = /snapshots
driver.sshRun.command = xm create -f /farm/$VM
driver.sshStop.command = xm destroy $VM
